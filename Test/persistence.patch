Index: commerce/main/java/com/serpics/commerce/persistence/Cart.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/Cart.java	(revision 0)
+++ commerce/main/java/com/serpics/commerce/persistence/Cart.java	(revision 0)
@@ -0,0 +1,8 @@
+package com.serpics.commerce.persistence;
+
+
+//@Entity(name = "Cart")
+//@DiscriminatorValue("0")
+public class Cart extends AbstractOrder {
+
+}
Index: commerce/main/java/com/serpics/commerce/persistence/Shipmode.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/Shipmode.java	(revision 46)
+++ commerce/main/java/com/serpics/commerce/persistence/Shipmode.java	(working copy)
@@ -34,7 +34,7 @@
 
 	// bi-directional many-to-one association to Order
 	@OneToMany(mappedBy = "shipmode")
-	private Set<Order> orders;
+	private Set<AbstractOrder> orders;
 
 	// bi-directional many-to-one association to ShipmodeDescr
 	@OneToMany(mappedBy = "shipmode")
@@ -87,11 +87,11 @@
 		this.orderitems = orderitems;
 	}
 
-	public Set<Order> getOrders() {
+	public Set<AbstractOrder> getOrders() {
 		return this.orders;
 	}
 
-	public void setOrders(Set<Order> orders) {
+	public void setOrders(Set<AbstractOrder> orders) {
 		this.orders = orders;
 	}
 
Index: commerce/main/java/com/serpics/commerce/persistence/OrdersAttribute.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/OrdersAttribute.java	(revision 46)
+++ commerce/main/java/com/serpics/commerce/persistence/OrdersAttribute.java	(working copy)
@@ -32,7 +32,7 @@
 	// bi-directional many-to-one association to Order
 	@ManyToOne
 	@JoinColumn(name = "orders_id", nullable = false)
-	private Order order;
+	private AbstractOrder order;
 
 	// bi-directional one-to-one association to OrdersAttributeValueDatetime
 	@OneToOne(mappedBy = "ordersAttribute")
@@ -81,11 +81,11 @@
 		this.sequence = sequence;
 	}
 
-	public Order getOrder() {
+	public AbstractOrder getOrder() {
 		return this.order;
 	}
 
-	public void setOrder(Order order) {
+	public void setOrder(AbstractOrder order) {
 		this.order = order;
 	}
 
Index: commerce/main/java/com/serpics/commerce/persistence/dao/jpa/OrderFactoryImpl.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/dao/jpa/OrderFactoryImpl.java	(revision 40)
+++ commerce/main/java/com/serpics/commerce/persistence/dao/jpa/OrderFactoryImpl.java	(working copy)
@@ -4,7 +4,7 @@
 
 import javax.persistence.Query;
 
-import com.serpics.commerce.persistence.Order;
+import com.serpics.commerce.persistence.AbstractOrder;
 import com.serpics.commerce.persistence.Orderitem;
 import com.serpics.commerce.persistence.Suborder;
 import com.serpics.commerce.persistence.dao.OrderFactory;
@@ -44,7 +44,7 @@
 	}
 	
 	@Override
-	public List<Order> fetchOrderByuser(Long user_id, Long customer_id,
+	public List<AbstractOrder> fetchOrderByuser(Long user_id, Long customer_id,
 			Long store_id, String status) {
 		StringBuffer q = new StringBuffer();
 		q.append("from Order o where storeId = :storeId");
@@ -66,7 +66,7 @@
 			query.setParameter("status",status);
 		
 		@SuppressWarnings("unchecked")
-		List<Order> resultList = query.getResultList();
+		List<AbstractOrder> resultList = query.getResultList();
 		return resultList;
 	}
 
@@ -98,22 +98,22 @@
 	}
 
 	@Override
-	public Order fetchCurrentOrder(Long user_id ,Long customer_id, Long store_id) {
-		List<Order> orders = this.fetchOrderByuser(user_id, customer_id, store_id, Order.PENDING);
+	public AbstractOrder fetchCurrentOrder(Long user_id ,Long customer_id, Long store_id) {
+		List<AbstractOrder> orders = this.fetchOrderByuser(user_id, customer_id, store_id, AbstractOrder.PENDING);
 		if (orders.size() > 0)
 			; //FIXME  throw TooManyPendigOrder
 		return  (orders.size() == 1 ? orders.get(0): null);
 	}
 	@Override
 	public List<Suborder> fetchCurrentSubOrder(Long user_id ,Long customer_id, Long store_id) {
-		return this.fetchSubOrderByuser(user_id, customer_id, store_id,null, Order.PENDING);
+		return this.fetchSubOrderByuser(user_id, customer_id, store_id,null, AbstractOrder.PENDING);
 		
 	}
 
 
 	@Override
 	public List<Orderitem> fetchCurrentOrderItem(Long user_id ,Long customer_id, Long store_id) {
-		return this.fetchOrderItemByuser(user_id, customer_id, store_id, Order.PENDING);
+		return this.fetchOrderItemByuser(user_id, customer_id, store_id, AbstractOrder.PENDING);
 	}
 
 }
Index: commerce/main/java/com/serpics/commerce/persistence/dao/OrderFactory.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/dao/OrderFactory.java	(revision 40)
+++ commerce/main/java/com/serpics/commerce/persistence/dao/OrderFactory.java	(working copy)
@@ -3,7 +3,7 @@
 
 import java.util.List;
 
-import com.serpics.commerce.persistence.Order;
+import com.serpics.commerce.persistence.AbstractOrder;
 import com.serpics.commerce.persistence.Orderitem;
 import com.serpics.commerce.persistence.Suborder;
 import com.serpics.core.persistence.dao.BaseFactory;
@@ -14,9 +14,9 @@
 
 	
 	public List<Suborder> fetchSubOrderByuser(Long user_id , Long customer_id, Long store_id ,Long address_id, String status);
-	public List<Order> fetchOrderByuser(Long user_id , Long customer_id, Long store_id , String status);
+	public List<AbstractOrder> fetchOrderByuser(Long user_id , Long customer_id, Long store_id , String status);
 	public List<Orderitem> fetchOrderItemByuser(Long user_id ,Long customer_id, Long store_id , String status);
-	public Order fetchCurrentOrder(Long user_id,Long customer_id , Long store_id);
+	public AbstractOrder fetchCurrentOrder(Long user_id,Long customer_id , Long store_id);
 	public List<Suborder> fetchCurrentSubOrder(Long user_id,Long customer_id , Long store_id);
 	public List<Orderitem> fetchCurrentOrderItem(Long user_id, Long customer_id , Long store_id);
 
Index: commerce/main/java/com/serpics/commerce/persistence/AbstractOrder.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/AbstractOrder.java	(revision 40)
+++ commerce/main/java/com/serpics/commerce/persistence/AbstractOrder.java	(working copy)
@@ -3,10 +3,8 @@
 import java.io.Serializable;
 import java.math.BigDecimal;
 import java.sql.Timestamp;
-import java.util.Date;
 import java.util.HashSet;
 import java.util.Set;
-import java.util.UUID;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
@@ -18,7 +16,6 @@
 import javax.persistence.JoinColumn;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
-import javax.persistence.PrePersist;
 import javax.persistence.Table;
 
 import com.serpics.membership.persistence.AbstractAddress;
@@ -29,7 +26,11 @@
  */
 @Entity
 @Table(name = "orders")
-public class Order extends com.serpics.core.persistence.jpa.Entity implements Serializable {
+// @Inheritance(strategy = InheritanceType.SINGLE_TABLE)
+// @DiscriminatorColumn(name = "pending", discriminatorType =
+// DiscriminatorType.INTEGER)
+// @DiscriminatorOptions(force = true)
+public abstract class AbstractOrder extends com.serpics.core.persistence.jpa.Entity implements Serializable {
 	private static final long serialVersionUID = 1L;
 
 	public static transient final String PENDING = "P";
@@ -39,104 +40,80 @@
 	@Id
 	@GeneratedValue(strategy = GenerationType.IDENTITY)
 	@Column(name = "orders_id", unique = true, nullable = false)
-	private Long ordersId;
+	protected Long ordersId;
 
-	@Column(name = "orderNumber", unique = true, nullable = false, length = 250)
-	private String orderNumber;
+	@Column(name = "usercookie", length = 250, unique = true, nullable = false)
+	protected String cookie;
 
-	@Column(name = "uuid", length = 250, unique = true, nullable = false)
-	private String uuid;
+	@Column(name = "pending", updatable = false, insertable = false)
+	protected int pending;
 
-	private Timestamp created;
+	protected Timestamp created;
 
 	@Column(nullable = false, length = 3)
-	private String currency;
+	protected String currency;
 
 	@Column(name = "customer_id", nullable = false)
-	private Long customerId;
+	protected Long customerId;
 
 	@Column(name = "discount_amount", precision = 10, scale = 4)
-	private BigDecimal discountAmount = new BigDecimal(0);
+	protected BigDecimal discountAmount = new BigDecimal(0);
 
 	@Column(name = "discount_perc", precision = 10, scale = 4)
-	private double discountPerc = 0;
+	protected double discountPerc = 0;
 
 	@Column(name = "order_amount", nullable = false, precision = 10, scale = 4)
-	private BigDecimal orderAmount = new BigDecimal(0);
-
-	@Column(name = "pay_amount", nullable = false, precision = 10, scale = 4)
-	private BigDecimal payAmount = new BigDecimal(0);
-
-	// @Column(name="shipping_address_id")
-	// private Long shippingAddressId;
+	protected BigDecimal orderAmount = new BigDecimal(0);
 
 	@Column(nullable = false, length = 2)
-	private String status;
+	protected String status;
 
 	@Column(name = "store_id", nullable = false)
-	private Long storeId;
+	protected Long storeId;
 
 	@Column(name = "total_product", precision = 10, scale = 4)
-	private BigDecimal totalProduct = new BigDecimal(0);
+	protected BigDecimal totalProduct = new BigDecimal(0);
+
+	@Column(name = "total_service", precision = 10, scale = 4)
+	protected BigDecimal totalService = new BigDecimal(0);
 
 	@Column(name = "total_shipping", precision = 10, scale = 4)
-	private BigDecimal totalShipping = new BigDecimal(0);
+	protected BigDecimal totalShipping = new BigDecimal(0);
 
 	@Column(name = "total_tax", precision = 10, scale = 4)
-	private BigDecimal totalTax = new BigDecimal(0);
+	protected BigDecimal totalTax = new BigDecimal(0);
 
 	@Column(name = "user_id", nullable = false)
-	private Long userId;
+	protected Long userId;
 
 	// bi-directional many-to-one association to Orderitem
 	@OneToMany(mappedBy = "order", cascade = { CascadeType.ALL }, fetch = FetchType.EAGER)
 	private Set<Orderitem> orderitems = new HashSet<Orderitem>(0);
 
-	// bi-directional many-to-one association to Orderpayment
-	@OneToMany(mappedBy = "order")
-	private Set<Orderpayment> orderpayments = new HashSet<Orderpayment>(0);
-
 	// bi-directional many-to-one association to Shipmode
 	@ManyToOne
 	@JoinColumn(name = "shipmode_id")
-	private Shipmode shipmode;
+	protected Shipmode shipmode;
 
 	// bi-directional many-to-one association to OrdersAttribute
 	@OneToMany(mappedBy = "order")
-	private Set<OrdersAttribute> ordersAttributes = new HashSet<OrdersAttribute>(0);
+	protected Set<OrdersAttribute> ordersAttributes = new HashSet<OrdersAttribute>(0);
 
 	// bi-directional many-to-one association to Suborder
 	@OneToMany(mappedBy = "order")
-	private Set<Suborder> suborders = new HashSet<Suborder>(0);
+	protected Set<Suborder> suborders = new HashSet<Suborder>(0);
 
 	@ManyToOne
 	@JoinColumn(name = "billing_address_id")
-	private AbstractAddress billingAddress;
+	protected AbstractAddress billingAddress;
 
 	@ManyToOne
 	@JoinColumn(name = "shipping_address_id")
-	private AbstractAddress shippingAddress;
-
-	public Order() {
-	}
-
-	public Order(Long user_id, Long store_id) {
-		this.userId = this.customerId = user_id;
-		this.storeId = store_id;
-		this.orderAmount = new BigDecimal(0);
-		this.payAmount = new BigDecimal(0);
-		this.status = "P";
-	}
+	protected AbstractAddress shippingAddress;
 
-	public Order(Long user_id, Long store_id, String uuid) {
-		this.userId = this.customerId = user_id;
-		this.storeId = store_id;
-		this.orderAmount = new BigDecimal(0);
-		this.payAmount = new BigDecimal(0);
-		this.status = "P";
-		this.created = new Timestamp(new Date().getTime());
-		this.uuid = (uuid != null) ? uuid : UUID.randomUUID().toString();
-	}
+	// bi-directional many-to-one association to Orderpayment
+	@OneToMany(mappedBy = "order")
+	private final Set<Orderpayment> orderpayments = new HashSet<Orderpayment>(0);
 
 	public Long getOrdersId() {
 		return this.ordersId;
@@ -194,14 +171,6 @@
 		this.orderAmount = orderAmount;
 	}
 
-	public BigDecimal getPayAmount() {
-		return this.payAmount;
-	}
-
-	public void setPayAmount(BigDecimal payAmount) {
-		this.payAmount = payAmount;
-	}
-
 	public String getStatus() {
 		return this.status;
 	}
@@ -258,14 +227,6 @@
 		this.orderitems = orderitems;
 	}
 
-	public Set<Orderpayment> getOrderpayments() {
-		return this.orderpayments;
-	}
-
-	public void setOrderpayments(Set<Orderpayment> orderpayments) {
-		this.orderpayments = orderpayments;
-	}
-
 	public Shipmode getShipmode() {
 		return this.shipmode;
 	}
@@ -306,6 +267,40 @@
 		this.shippingAddress = shippingAddress;
 	}
 
+	public String getCookie() {
+		return cookie;
+	}
+
+	public void setCookie(String cookie) {
+		this.cookie = cookie;
+	}
+
+	public int getPending() {
+		return pending;
+	}
+
+	public void setPending(int pending) {
+		this.pending = pending;
+	}
+
+	public BigDecimal getTotalService() {
+		return totalService;
+	}
+
+	public void setTotalService(BigDecimal totalService) {
+		this.totalService = totalService;
+	}
+
+	public Set<Orderpayment> getOrderpayments() {
+		return orderpayments;
+	}
+
+	@Column(name = "orderNumber", unique = true, nullable = false, length = 250)
+	private String orderNumber;
+
+	@Column(name = "pay_amount", nullable = false, precision = 10, scale = 4)
+	private BigDecimal payAmount = new BigDecimal(0);
+
 	public String getOrderNumber() {
 		return orderNumber;
 	}
@@ -314,18 +309,12 @@
 		this.orderNumber = orderNumber;
 	}
 
-	public String getUuid() {
-		return uuid;
-	}
-
-	public void setUuid(String uuid) {
-		this.uuid = uuid;
+	public BigDecimal getPayAmount() {
+		return payAmount;
 	}
 
-	@PrePersist
-	public void generateOrderNumber() {
-		if (this.orderNumber == null)
-			orderNumber = ordersId.toString();
+	public void setPayAmount(BigDecimal payAmount) {
+		this.payAmount = payAmount;
 	}
 
 }
\ No newline at end of file
Index: commerce/main/java/com/serpics/commerce/persistence/Order.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/Order.java	(revision 46)
+++ commerce/main/java/com/serpics/commerce/persistence/Order.java	(working copy)
@@ -1,331 +0,0 @@
-package com.serpics.commerce.persistence;
-
-import java.io.Serializable;
-import java.math.BigDecimal;
-import java.sql.Timestamp;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.UUID;
-
-import javax.persistence.CascadeType;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.FetchType;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.ManyToOne;
-import javax.persistence.OneToMany;
-import javax.persistence.PrePersist;
-import javax.persistence.Table;
-
-import com.serpics.membership.persistence.AbstractAddress;
-
-/**
- * The persistent class for the orders database table.
- * 
- */
-@Entity
-@Table(name = "orders")
-public class Order extends com.serpics.core.persistence.jpa.Entity implements Serializable {
-	private static final long serialVersionUID = 1L;
-
-	public static transient final String PENDING = "P";
-	public static transient final String WAITING = "W"; // Waiting Payment
-	public static transient final String COMPLETE = "C";
-
-	@Id
-	@GeneratedValue(strategy = GenerationType.IDENTITY)
-	@Column(name = "orders_id", unique = true, nullable = false)
-	private Long ordersId;
-
-	@Column(name = "orderNumber", unique = true, nullable = false, length = 250)
-	private String orderNumber;
-
-	@Column(name = "uuid", length = 250, unique = true, nullable = false)
-	private String uuid;
-
-	private Timestamp created;
-
-	@Column(nullable = false, length = 3)
-	private String currency;
-
-	@Column(name = "customer_id", nullable = false)
-	private Long customerId;
-
-	@Column(name = "discount_amount", precision = 10, scale = 4)
-	private BigDecimal discountAmount = new BigDecimal(0);
-
-	@Column(name = "discount_perc", precision = 10, scale = 4)
-	private double discountPerc = 0;
-
-	@Column(name = "order_amount", nullable = false, precision = 10, scale = 4)
-	private BigDecimal orderAmount = new BigDecimal(0);
-
-	@Column(name = "pay_amount", nullable = false, precision = 10, scale = 4)
-	private BigDecimal payAmount = new BigDecimal(0);
-
-	// @Column(name="shipping_address_id")
-	// private Long shippingAddressId;
-
-	@Column(nullable = false, length = 2)
-	private String status;
-
-	@Column(name = "store_id", nullable = false)
-	private Long storeId;
-
-	@Column(name = "total_product", precision = 10, scale = 4)
-	private BigDecimal totalProduct = new BigDecimal(0);
-
-	@Column(name = "total_shipping", precision = 10, scale = 4)
-	private BigDecimal totalShipping = new BigDecimal(0);
-
-	@Column(name = "total_tax", precision = 10, scale = 4)
-	private BigDecimal totalTax = new BigDecimal(0);
-
-	@Column(name = "user_id", nullable = false)
-	private Long userId;
-
-	// bi-directional many-to-one association to Orderitem
-	@OneToMany(mappedBy = "order", cascade = { CascadeType.ALL }, fetch = FetchType.EAGER)
-	private Set<Orderitem> orderitems = new HashSet<Orderitem>(0);
-
-	// bi-directional many-to-one association to Orderpayment
-	@OneToMany(mappedBy = "order")
-	private Set<Orderpayment> orderpayments = new HashSet<Orderpayment>(0);
-
-	// bi-directional many-to-one association to Shipmode
-	@ManyToOne
-	@JoinColumn(name = "shipmode_id")
-	private Shipmode shipmode;
-
-	// bi-directional many-to-one association to OrdersAttribute
-	@OneToMany(mappedBy = "order")
-	private Set<OrdersAttribute> ordersAttributes = new HashSet<OrdersAttribute>(0);
-
-	// bi-directional many-to-one association to Suborder
-	@OneToMany(mappedBy = "order")
-	private Set<Suborder> suborders = new HashSet<Suborder>(0);
-
-	@ManyToOne
-	@JoinColumn(name = "billing_address_id")
-	private AbstractAddress billingAddress;
-
-	@ManyToOne
-	@JoinColumn(name = "shipping_address_id")
-	private AbstractAddress shippingAddress;
-
-	public Order() {
-	}
-
-	public Order(Long user_id, Long store_id) {
-		this.userId = this.customerId = user_id;
-		this.storeId = store_id;
-		this.orderAmount = new BigDecimal(0);
-		this.payAmount = new BigDecimal(0);
-		this.status = "P";
-	}
-
-	public Order(Long user_id, Long store_id, String uuid) {
-		this.userId = this.customerId = user_id;
-		this.storeId = store_id;
-		this.orderAmount = new BigDecimal(0);
-		this.payAmount = new BigDecimal(0);
-		this.status = "P";
-		this.created = new Timestamp(new Date().getTime());
-		this.uuid = (uuid != null) ? uuid : UUID.randomUUID().toString();
-	}
-
-	public Long getOrdersId() {
-		return this.ordersId;
-	}
-
-	public void setOrdersId(Long ordersId) {
-		this.ordersId = ordersId;
-	}
-
-	public Timestamp getCreated() {
-		return this.created;
-	}
-
-	public void setCreated(Timestamp created) {
-		this.created = created;
-	}
-
-	public String getCurrency() {
-		return this.currency;
-	}
-
-	public void setCurrency(String currency) {
-		this.currency = currency;
-	}
-
-	public Long getCustomerId() {
-		return this.customerId;
-	}
-
-	public void setCustomerId(Long customerId) {
-		this.customerId = customerId;
-	}
-
-	public BigDecimal getDiscountAmount() {
-		return this.discountAmount;
-	}
-
-	public void setDiscountAmount(BigDecimal discountAmount) {
-		this.discountAmount = discountAmount;
-	}
-
-	public double getDiscountPerc() {
-		return this.discountPerc;
-	}
-
-	public void setDiscountPerc(double discountPerc) {
-		this.discountPerc = discountPerc;
-	}
-
-	public BigDecimal getOrderAmount() {
-		return this.orderAmount;
-	}
-
-	public void setOrderAmount(BigDecimal orderAmount) {
-		this.orderAmount = orderAmount;
-	}
-
-	public BigDecimal getPayAmount() {
-		return this.payAmount;
-	}
-
-	public void setPayAmount(BigDecimal payAmount) {
-		this.payAmount = payAmount;
-	}
-
-	public String getStatus() {
-		return this.status;
-	}
-
-	public void setStatus(String status) {
-		this.status = status;
-	}
-
-	public Long getStoreId() {
-		return this.storeId;
-	}
-
-	public void setStoreId(Long storeId) {
-		this.storeId = storeId;
-	}
-
-	public BigDecimal getTotalProduct() {
-		return this.totalProduct;
-	}
-
-	public void setTotalProduct(BigDecimal totalProduct) {
-		this.totalProduct = totalProduct;
-	}
-
-	public BigDecimal getTotalShipping() {
-		return this.totalShipping;
-	}
-
-	public void setTotalShipping(BigDecimal totalShipping) {
-		this.totalShipping = totalShipping;
-	}
-
-	public BigDecimal getTotalTax() {
-		return this.totalTax;
-	}
-
-	public void setTotalTax(BigDecimal totalTax) {
-		this.totalTax = totalTax;
-	}
-
-	public Long getUserId() {
-		return this.userId;
-	}
-
-	public void setUserId(Long userId) {
-		this.userId = userId;
-	}
-
-	public Set<Orderitem> getOrderitems() {
-		return this.orderitems;
-	}
-
-	public void setOrderitems(Set<Orderitem> orderitems) {
-		this.orderitems = orderitems;
-	}
-
-	public Set<Orderpayment> getOrderpayments() {
-		return this.orderpayments;
-	}
-
-	public void setOrderpayments(Set<Orderpayment> orderpayments) {
-		this.orderpayments = orderpayments;
-	}
-
-	public Shipmode getShipmode() {
-		return this.shipmode;
-	}
-
-	public void setShipmode(Shipmode shipmode) {
-		this.shipmode = shipmode;
-	}
-
-	public Set<OrdersAttribute> getOrdersAttributes() {
-		return this.ordersAttributes;
-	}
-
-	public void setOrdersAttributes(Set<OrdersAttribute> ordersAttributes) {
-		this.ordersAttributes = ordersAttributes;
-	}
-
-	public Set<Suborder> getSuborders() {
-		return this.suborders;
-	}
-
-	public void setSuborders(Set<Suborder> suborders) {
-		this.suborders = suborders;
-	}
-
-	public AbstractAddress getBillingAddress() {
-		return billingAddress;
-	}
-
-	public void setBillingAddress(AbstractAddress billingAddress) {
-		this.billingAddress = billingAddress;
-	}
-
-	public AbstractAddress getShippingAddress() {
-		return shippingAddress;
-	}
-
-	public void setShippingAddress(AbstractAddress shippingAddress) {
-		this.shippingAddress = shippingAddress;
-	}
-
-	public String getOrderNumber() {
-		return orderNumber;
-	}
-
-	public void setOrderNumber(String orderNumber) {
-		this.orderNumber = orderNumber;
-	}
-
-	public String getUuid() {
-		return uuid;
-	}
-
-	public void setUuid(String uuid) {
-		this.uuid = uuid;
-	}
-
-	@PrePersist
-	public void generateOrderNumber() {
-		if (this.orderNumber == null)
-			orderNumber = ordersId.toString();
-	}
-
-}
\ No newline at end of file
Index: commerce/main/java/com/serpics/commerce/persistence/Suborder.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/Suborder.java	(revision 46)
+++ commerce/main/java/com/serpics/commerce/persistence/Suborder.java	(working copy)
@@ -66,7 +66,7 @@
 	// bi-directional many-to-one association to Order
 	@ManyToOne
 	@JoinColumn(name = "orders_id")
-	private Order order;
+	private AbstractOrder order;
 
 	// bi-directional many-to-one association to Shipmode
 	@ManyToOne
@@ -164,11 +164,11 @@
 		this.orderitems = orderitems;
 	}
 
-	public Order getOrder() {
+	public AbstractOrder getOrder() {
 		return this.order;
 	}
 
-	public void setOrder(Order order) {
+	public void setOrder(AbstractOrder order) {
 		this.order = order;
 	}
 
Index: commerce/main/java/com/serpics/commerce/persistence/Orderitem.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/Orderitem.java	(revision 46)
+++ commerce/main/java/com/serpics/commerce/persistence/Orderitem.java	(working copy)
@@ -69,7 +69,7 @@
 	// bi-directional many-to-one association to Order
 	@ManyToOne
 	@JoinColumn(name = "orders_id", nullable = true)
-	private Order order;
+	private AbstractOrder order;
 
 	// bi-directional many-to-one association to Shipmode
 	@ManyToOne
@@ -91,7 +91,7 @@
 
 	public Orderitem(Long store_id, Long user_id) {
 		this.userId = this.customerId = user_id;
-		this.status = Order.PENDING;
+		this.status = AbstractOrder.PENDING;
 		this.storeId = store_id;
 	}
 
@@ -101,7 +101,7 @@
 		this.currency = currency;
 		this.quantity = quantity;
 		this.skuCost = this.skuNetPrice = this.skuPrice = price;
-		this.status = Order.PENDING;
+		this.status = AbstractOrder.PENDING;
 	}
 
 	public Long getOrderitemsId() {
@@ -224,11 +224,11 @@
 		this.userId = userId;
 	}
 
-	public Order getOrder() {
+	public AbstractOrder getOrder() {
 		return this.order;
 	}
 
-	public void setOrder(Order order) {
+	public void setOrder(AbstractOrder order) {
 		this.order = order;
 	}
 
Index: commerce/main/java/com/serpics/commerce/persistence/Orderpayment.java
===================================================================
--- commerce/main/java/com/serpics/commerce/persistence/Orderpayment.java	(revision 46)
+++ commerce/main/java/com/serpics/commerce/persistence/Orderpayment.java	(working copy)
@@ -36,9 +36,9 @@
 	private Long paymethod;
 
 	// bi-directional many-to-one association to Order
-	@ManyToOne
+	@ManyToOne(targetEntity = AbstractOrder.class)
 	@JoinColumn(name = "orders_id", nullable = false)
-	private Order order;
+	private AbstractOrder order;
 
 	public Orderpayment() {
 	}
@@ -72,11 +72,11 @@
 		this.paymethod = paymethod;
 	}
 
-	public Order getOrder() {
+	public AbstractOrder getOrder() {
 		return this.order;
 	}
 
-	public void setOrder(Order order) {
+	public void setOrder(AbstractOrder order) {
 		this.order = order;
 	}
 
